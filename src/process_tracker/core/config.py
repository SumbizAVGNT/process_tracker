from __future__ import annotations

import base64
import os
import secrets
from pathlib import Path

from pydantic import Field, computed_field
from pydantic_settings import BaseSettings, SettingsConfigDict

# --- –ù–∞–π—Ç–∏ –∏ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å .env –∏–∑ –ö–û–†–ù–Ø –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç CWD ---
# config.py -> core -> process_tracker -> src -> <PROJECT_ROOT>
PROJECT_ROOT = Path(__file__).resolve().parents[3]
ENV_PATH = PROJECT_ROOT / ".env"
try:
    from dotenv import load_dotenv  # type: ignore
    if ENV_PATH.exists():
        load_dotenv(dotenv_path=ENV_PATH, override=False)
except Exception:
    # dotenv –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    pass


def _dev_secret() -> str:
    return secrets.token_urlsafe(48)


def _dev_fernet_key() -> str:
    return base64.urlsafe_b64encode(os.urandom(32)).decode("ascii")


class Settings(BaseSettings):
    # –û–±—â–∏–µ
    app_name: str = "process-tracker"
    app_env: str = "dev"
    log_level: str = "INFO"

    # Secrets (–¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è dev, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –±–µ–∑ .env)
    app_secret_key: str = Field(default_factory=_dev_secret)
    crypt_fernet_key: str = Field(default_factory=_dev_fernet_key)

    # API
    api_host: str = "127.0.0.1"
    api_port: int = 8787
    cors_origins: list[str] = Field(default_factory=list)

    # DB
    # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –±—É–¥–µ—Ç —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –∫ PROJECT_ROOT (—Å–º. db_url_resolved)
    db_url: str = "sqlite+aiosqlite:///./process_tracker.db"
    db_echo: bool = False
    db_query_timeout: float = 10.0
    db_max_concurrency: int = 8  # üîπ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Å–µ–º–∞—Ñ–æ—Ä–∞)

    # –°–ª—É–∂–µ–±–Ω–æ–µ
    project_root: Path = Field(default_factory=lambda: PROJECT_ROOT)

    model_config = SettingsConfigDict(
        env_file=str(ENV_PATH),
        env_file_encoding="utf-8",
        extra="ignore",
        case_sensitive=False,
    )

    @computed_field
    @property
    def db_url_resolved(self) -> str:
        """
        –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π SQLite URL –≤–∏–¥–∞ sqlite+aiosqlite:///./file.db,
        –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ project_root.
        """
        url = (self.db_url or "").strip()
        prefix = "sqlite+aiosqlite:///./"
        if url.startswith(prefix):
            rel = url[len(prefix):]
            abs_path = (self.project_root / rel).resolve()
            return f"sqlite+aiosqlite:///{abs_path.as_posix()}"
        return url


settings = Settings()
